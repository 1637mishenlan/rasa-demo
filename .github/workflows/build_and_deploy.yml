  
name: Build and Deploy
on: [push, pull_request]

jobs:
  build_id:
    runs-on: ubuntu-latest
    steps:
      - name: 'Set build id'
        id: build_id
        # add a step output `steps.build_id.outputs.id` as the unique id
        run: echo "::set-output name=id::$(date +%s)"
  # lint-testing:
  #   name: Code Formatting Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Set up Python 3.7
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: 3.7
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements-dev.txt
  #   - name: Code Formatting Tests
  #     working-directory: ${{ github.workspace }}
  #     run: |
  #       make lint
  # type-testing:
  #   name: Type Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Set up Python 3.7
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: 3.7
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements-dev.txt
  #   - name: Type Checking
  #     working-directory: ${{ github.workspace }}
  #     run: |
  #       make types
  # training-testing:
  #   name: Testing Stories
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Set up Python 3.7
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: 3.7
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements-dev.txt
  #   - name: Train Model
  #     working-directory: ${{ github.workspace }}
  #     run: |
  #       rasa train
  #   - name: Test Training Stories
  #     working-directory: ${{ github.workspace }}
  #     run: |
  #       rasa test --stories test_stories/stories.md --fail-on-prediction-errors
  #   - name: Cross-validate NLU model
  #     run: |
  #       rasa test nlu -f 5 --cross-validation
  #       python format_results.py
  #   - name: post cross-val results to PR
  #     uses: amn41/comment-on-pr@comment-file-contents
  #     continue-on-error: true
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       msg: results.md
  #   - name: Upload model
  #     if: github.ref == 'refs/heads/master'
  #     uses: actions/upload-artifact@master
  #     with:
  #       name: model
  #       path: models 
  build-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [lbuild_id]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    - name: Login to gcloud registry
      id: gcloud
      uses: elgohr/gcloud-login-action@master
      with:
        account_key: ${{ secrets.GCLOUD_AUTH }}
    - name: Pull Latest Image
      run: |
        docker pull gcr.io/replicated-test/rasa-demo:latest || true
    - name: Build Image
      run: |
        docker build -t gcr.io/replicated-test/rasa-demo:v$build_id -t gcr.io/replicated-test/rasa-demo:latest --cache-from gcr.io/replicated-test/rasa-demo:latest .
    - name: Publish to Registry
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: gcr.io/replicated-test/rasa-demo:v$build_id
        username: ${{ steps.gcloud.outputs.username }}
        password: ${{ steps.gcloud.outputs.password }}
        registry: gcr.io